#version 330 core

in vec2 UV; 

out vec3 colour;

uniform sampler2D renderedTexture; //inputs shadow map and screen texture
uniform sampler2D depthTexture;
uniform sampler2D depthTexture_outer;

in vec3 L;
in vec3 V;

layout(location = 0) out vec3 color;

#define min 7

void main(){
    float a,b, occ = 0.0f;
    vec2  u_v;
    //int min = 7 ; // THIS IS SLOW BIT
    for(int i=-min; i<min+1;++i){
        for(int j=-min; j<min+1; ++j){
            a=i*0.002f;
            b=j*0.002f;
            u_v = UV + vec2(a,b);
            bool temp = texture(depthTexture, u_v).x <1.0f;
            occ += float(temp);
        }
    }
    vec3 LightDir = 5*V - L;
  vec3 n = vec3(0,0,-1.0f);
  vec3 l = normalize(LightDir);
  float diffuseCoeff = 1.3*pow(dot(n,l),10.0f);
    
    colour = diffuseCoeff*(texture(depthTexture_outer, UV).r)*(1.0f - occ/(4*min*min*2))*texture(renderedTexture, UV).rgb; //colour depends on distance between light and screen.
}